package logic;
import java.io.File;
import java.io.IOException;
import java.nio.file.SecureDirectoryStream;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Locale;

public class Catalog {

	private ArrayList<Cruise> cruises;
	private ArrayList<Ship> ships;
	private ArrayList<Extra> extras;
	private int [] descuento;
	private ArrayList <String>zonas;
	private Locale localizacion;

	public Catalog(Locale localizacion) {
		this.localizacion=localizacion;
		cruises = new ArrayList<>();
		ships = new ArrayList<>();
		zonas= new ArrayList<>();
		try {
			extras = new ArrayList<>();
		} catch (Exception e1) {
			e1.printStackTrace();
		}
		try {
			start();
		} catch (IOException e) {
			System.out.print("Database could not be loaded. ERROR: " + e);
		}
	}

	public void start() throws IOException {
		File cruises = new File("data/cruises.dat");
		File ships = new File("data/ships.dat");
		File extras = new File("data/extras.dat");
		readShips(ships);
		readCruises(cruises);
		readExtras(extras);
	}

	private void readShips(File file) throws IOException {
		CatalogReader reader = new CatalogReader(file);
		for (int index = 0; index < reader.getFileSize(); index++) {
			String[] tokens = reader.processLine(index);

			String codigoBarco = tokens[0];
			String denominacion = tokens[1];
			String descripcion = tokens[2];
			long camDobInt=Long.parseLong(tokens[3]);
			long camDobExt=Long.parseLong(tokens[4]);
			long camFamInt=Long.parseLong(tokens[5]);
			long camFamExt=Long.parseLong(tokens[6]);
			double precioCamDobInt = Double.parseDouble(tokens[7]);
			double precioCamDobExt = Double.parseDouble(tokens[8]);
			double precioCamFamInt = Double.parseDouble(tokens[9]);
			double precioCamFamExt = Double.parseDouble(tokens[10]);
			Ship barco = new Ship(codigoBarco, denominacion, descripcion, camDobInt, camDobExt, camFamInt, camFamExt,
					precioCamDobInt, precioCamDobExt, precioCamFamInt, precioCamFamExt);
			ships.add(barco);
		}
	}

	private void readCruises(File file) throws IOException {
		CatalogReader reader = new CatalogReader(file);
		for (int index = 0; index < reader.getFileSize(); index++) {
			String[] tokens = reader.processLine(index);
			String codigoCrucero = tokens[0];
			String zona = tokens[1];
			if (!zonas.contains(zona)){
				zonas.add(zona);
			}
			String denominacion = tokens[2];
			String puertoSalida = tokens[3];
			String itinerario = tokens[4];
			String descripcion = tokens[5];
			boolean aptoMenores;
			if (tokens[6] == "S") {
				aptoMenores = Cruise.UNDER16;
			} else {
				aptoMenores = Cruise.NOTUNDER16;
			}
			int duration = Integer.parseInt(tokens[7]);
			DateFormat formato = DateFormat.getDateInstance(DateFormat.LONG, localizacion);
			String[] fechasString = tokens[8].split("%");
			ArrayList<Date> fechasSalida=new ArrayList<>();
			for (String fecha: fechasString){
				fechasSalida.add(formato.parse(fecha));
			}
			String codigoBarco = tokens[9];
			Ship barco = findBarco(codigoBarco);
			Cruise crucero = new Cruise(codigoCrucero, zona, denominacion, puertoSalida, itinerario, descripcion,
					aptoMenores, duration, fechasSalida, barco);

			cruises.add(crucero);
		}
	}
	
	private void readExtras(File file) throws IOException{
		CatalogReader reader = new CatalogReader(file);
		for (int index = 0; index < reader.getFileSize(); index++) {
			String[] tokens = reader.processLine(index);
			String codigoExtra = tokens[0];
			String denominacion= tokens[1];
			double precio = Double.parseDouble(tokens[2]);
			Extra extra = new Extra(codigoExtra, denominacion, precio);
			extras.add(extra);
		}
	}

	private Ship findBarco(String codigoBarco) {
		for (Ship barco : ships) {
			if (barco.getCodigoBarco().equals(codigoBarco)) {
				return barco;
			}
			;
		}
		Ship barco = new Ship(codigoBarco);
		ships.add(barco);
		return barco;
	}
	
	public int [] getDescuento() {
		return descuento;
	}

	public void setDescuento(int [] descuento) {
		this.descuento = descuento;
	}

	public ArrayList<String> getZonas() {
		return zonas;
	}
	public Cruise[] searchZonaDate(String inic, String fin, String zona){
		ArrayList<Cruise> cruceros= new ArrayList<>();
		for (Cruise c: cruises){
			if (c.getZona().equals(zona)){
				for (Date fecha:c.getFechasSalida()){
					if (fecha>inic && fecha<fin){
						cruceros.add(c);
					}
				}
			}
		}
	}

}
